import React, { useState, useEffect } from 'react';
import axios from 'axios';
import InfiniteScroll from 'react-infinite-scroll-component';


// Replace with your API endpoint (generated by "node server.js ")
const API_URL = 'http://localhost:3001/cards'; 

const Body = () => {
  //
  const [cards, setCards] = useState([]);
  const [activeTab, setActiveTab] = useState('Your');
  const [searchQuery, setSearchQuery] = useState('');
  const [loading, setLoading] = useState(false);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);

  useEffect(() => {
    loadCards();
  }, [activeTab, searchQuery]);

  const loadCards = async () => {
    setLoading(true);

    // Simulating API call
    const response = await fetch(`${API_URL}?tab=${activeTab}&search=${searchQuery}&page=${page}&per_page=10`);
    const data = await response.json();

    setCards((prevCards) => [...prevCards, ...data.data]);
    setLoading(false);
    setHasMore(page * 10 < data.total);
  };

  const handleTabChange = (tab) => {
    setCards([]);
    setPage(1);
    setHasMore(true);
    setActiveTab(tab);
  };

  const handleSearch = (e) => {
    setCards([]);
    setPage(1);
    setHasMore(true);
    setSearchQuery(e.target.value);
  };

  const handleLoadMore = () => {
    setPage((prevPage) => prevPage + 1);
  };
  //
  
 
  
  const [searchTerm, setSearchTerm] = useState('');
  const [cardTypeFilter, setCardTypeFilter] = useState('');
  
  useEffect(() => {
    fetchCards();
  }, []);

  const fetchCards = async () => {
    try {
      const response = await axios.get(`http://localhost:3001/cards?page=${page}&per_page=10`);
      const data = response.data;
      const newCards = data.data;
      setCards(prevCards => [...prevCards, ...newCards]);
      setPage(prevPage => prevPage + 1);
      setHasMore(newCards.length > 0);
    } catch (error) {
      console.error('Error fetching cards:', error);
    }
  };
  
 

  const handleCardTypeFilter = event => {
    setCardTypeFilter(event.target.value);
  };

  const filteredCards = cards.filter(card => {
    return (
      card.name.toLowerCase().includes(searchTerm.toLowerCase()) &&
      (cardTypeFilter === '' || card.card_type === cardTypeFilter)
    );
  });

  return (
    <div className='containerButton'>
      <h1>Card Listing</h1>
      <div className="tabs">
        <button className={activeTab === 'Your' ? 'active' : ''} onClick={() => handleTabChange('Your')}>
          Your Cards
        </button>
        <button className={activeTab === 'All' ? 'active' : ''} onClick={() => handleTabChange('All')}>
          All Cards
        </button>
        <button className={activeTab === 'Blocked' ? 'active' : ''} onClick={() => handleTabChange('Blocked')}>
          Blocked Cards
        </button>
      </div>
      
    <div>
    <input type="text" placeholder="Search by card name" value={searchQuery} onChange={handleSearch} />
      <select value={cardTypeFilter} onChange={handleCardTypeFilter}>
        <option value="">All</option>
        <option value="burner">Burner</option>
        <option value="subscription">Subscription</option>
      </select>

      <InfiniteScroll
        dataLength={filteredCards.length}
        next={fetchCards}
        hasMore={hasMore}
        loader={<h4>Loading...</h4>}
        endMessage={<p>No more cards to load.</p>}
      >
      
        {filteredCards.map((card, index) => (
          <div className="cont">
          <div key={index}  className="card">
            <h2>{card.name}</h2>
            <h2>{card.budget_name}</h2>
            <h3>{card.owner_id}</h3>
            <h3>{card.spent.value}</h3>
            <h3>{card.available_to_spend.value}</h3>
            <h2>{card.card_type}</h2>
            {card.card_type === 'burner' && <h2>{`Expiry: ${card.expiry}`}</h2>}
            {card.card_type === 'subscription' && <h2>{`Limit: ${card.limit}`}</h2>}
            <h2>{card.status}</h2>
          </div>
          </div>
          
        ))}
      </InfiniteScroll>
    </div>
    </div>
  );
};




export default Body;
